name: Run Project

on:
  workflow_call:
    inputs:
      project-link:
        required: true
        type: string
      release-name:
        required: true
        type: string
    secrets: 
      GH_ACCESS_TOKEN:
        required: true 
jobs:
  run-original:
    runs-on: ubuntu-latest
    timeout-minutes: 185
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
    
        - name: Prepare Working Directory
          run: |
              mkdir ./projects
              cd ./projects
    
        - name: Setup variables
          run: |
              REPO_URL=$(echo "${{ inputs.project-link }}" | sed 's/;.*//')
              REPO_NAME="${REPO_URL##*/}"  # This strips everything before the last '/' character
              OWNER_NAME="${REPO_URL%/$REPO_NAME}"  # Removes the repo name from the URL, leaving the owner path
              OWNER_NAME="${OWNER_NAME##*/}"  # Extracts only the owner name
              FULL_REPO_NAME="$OWNER_NAME-$REPO_NAME"  # Combines owner and repository names with a dash

              ZIP_FILE="${FULL_REPO_NAME}_ORIGINAL.zip"
              echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
              echo "FULL_REPO_NAME=$FULL_REPO_NAME" >> $GITHUB_ENV
              echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
              echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          shell: bash
    
        - name: clone SoftEngResearch/mop-with-dynapt
          run: |
            cd ./projects
            git clone https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/SoftEngResearch/mop-with-dynapt.git
            cd mop-with-dynapt
            git checkout instrument_everything
    
        - name: Create projects directory and copy scripts from ../scripts there
          run: |
            cd ./projects
            cp ../scripts/* .
            ls -l

        - name: Install Dependencies
          run: |
            echo "================== Installing Dependencies =================="
            cd ./projects
            ls -l
            chmod +x ./install.sh
            ./install.sh "${{ inputs.project-link }}"

        - name: Remove unnecessary specs
          run: |
            cd ./projects/$REPO_NAME
            # cp ../../scripts/remove-unnecessary-specs.sh .
            # chmod +x ./remove-unnecessary-specs.sh
            # ./remove-unnecessary-specs.sh

            echo "======================= specs before removing unwanted specs ========================"
            ls -al ../mop-with-dynapt/specs-new
            
            declare -a all_specs=($(ls ../mop-with-dynapt/specs-new | grep -v -E 'bin|__pycache__'))
            declare -a specs_to_delete=("ArgParse_Parent" "Arrays_SortBeforeBinarySearch" "faulthandler_disableBeforeClose" "faulthandler_tracetrackDumpBeforeClose" "faulthandler_unregisterBeforeClose" "File_MustClose" "NLTK_MissingMegamExplicitArg" "NLTK_MissingMegamFvalsArg" "NLTK_MustImplementEntries" "NLTK_NonterminalSymbolMutability" "RandomMustUseSeed" "Requests_PreparedRequestInit" "StringTemplate_ChangeAfterCreate" "Turtle_LastStatementDone" "UseProtp_in_FTP_TLS" "XMLParser_ParseMustFinalize")

          
            # delete all specs that appear in specs_to_delete. don't forget that spec file names end with .py as they're python files
            
            # for spec in "${all_specs[@]}"; do
            #   if [[ " ${specs_to_delete[@]} " =~ " ${spec%.*} " ]]; then
            #     rm ../mop-with-dynapt/specs-new/$spec
            #   fi
            # done

            # also delete these (causing issues)
            # rm ../mop-with-dynapt/specs-new/TfFunction_NoSideEffect.py
            # rm ../mop-with-dynapt/specs-new/Sets_Comparable.py
            # rm ../mop-with-dynapt/specs-new/Console_CloseReader.py

            echo "=================== specs after removing unwanted ones ================="
            ls -al ../mop-with-dynapt/specs-new
    
        - name: Install Dependencies and Run MOP
          run: |
            echo "================== Running MOP =================="
            cd ./projects

            echo "Repository Name: $REPO_NAME"
            chmod +x ./run-mop-new.sh
            ./run-mop-new.sh ./$REPO_NAME "ORIGINAL"
    
            # extract all .gz files
            cd ./reports/$REPO_NAME
            find . -type f -name "*.gz" -exec gunzip {} \;
            echo "Files within ./projects/reports/$REPO_NAME:"
            ls -l
        
        - name: Save link to logs
          run: |
            cd ./projects/reports/$REPO_NAME
            echo "https://github.com/${{github.repository}}/releases/download/${{ inputs.release-name }}/${{env.ZIP_FILE}}" > logs_link.txt
    
        - name: Zip report files
          run: |
            cd ./projects/reports/$REPO_NAME
            zip -r ../../$ZIP_FILE .  # Create a zip file in the projects directory
            ls -l ../
          shell: bash
    
        - name: Upload report to GitHub Release
          uses: Wandalen/wretry.action@master
          with:
            attempt_delay: 60000 # 1 min
            attempt_limit: 10
            action: softprops/action-gh-release@v1
            with: |
              files: ./projects/${{env.ZIP_FILE}}
              tag_name: ${{ inputs.release-name }}
              name: ${{ inputs.release-name }}
              draft: false
              prerelease: true
              token: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Fail the job on errors in ${{env.REPO_NAME}}_ORIGINAL.out
          run: |
            cd ./projects/reports/$REPO_NAME
            cp ../../../scripts/check_success.py .
            python3 check_success.py

  run-algos:
    needs: run-original
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        algorithm: ['D']
    timeout-minutes: 185
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
    
        - name: Prepare Working Directory
          run: |
              mkdir ./projects
              cd ./projects
    
        - name: Setup variables
          run: |
              REPO_URL=$(echo "${{ inputs.project-link }}" | sed 's/;.*//')
              REPO_NAME="${REPO_URL##*/}"  # This strips everything before the last '/' character
              OWNER_NAME="${REPO_URL%/$REPO_NAME}"  # Removes the repo name from the URL, leaving the owner path
              OWNER_NAME="${OWNER_NAME##*/}"  # Extracts only the owner name
              FULL_REPO_NAME="$OWNER_NAME-$REPO_NAME"  # Combines owner and repository names with a dash
              
              ZIP_FILE="${FULL_REPO_NAME}_${{matrix.algorithm}}.zip"
              echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
              echo "FULL_REPO_NAME=$FULL_REPO_NAME" >> $GITHUB_ENV
              echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
              echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          shell: bash
    
        - name: clone SoftEngResearch/mop-with-dynapt
          run: |
            cd ./projects
            git clone https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/SoftEngResearch/mop-with-dynapt.git
            cd mop-with-dynapt
            git checkout instrument_everything
    
        - name: Create projects directory and copy scripts from ../scripts there
          run: |
            cd ./projects
            cp ../scripts/* .
            ls -l

        - name: Install Dependencies
          run: |
            echo "================== Installing Dependencies =================="
            cd ./projects
            ls -l
            chmod +x ./install.sh
            ./install.sh "${{ inputs.project-link }}"

        - name: Remove unnecessary specs
          run: |
            cd ./projects/$REPO_NAME
            # cp ../../scripts/remove-unnecessary-specs.sh .
            # chmod +x ./remove-unnecessary-specs.sh
            # ./remove-unnecessary-specs.sh

            echo "======================= specs before removing unwanted specs ========================"
            ls -al ../mop-with-dynapt/specs-new
            
            declare -a all_specs=($(ls ../mop-with-dynapt/specs-new | grep -v -E 'bin|__pycache__'))
            declare -a specs_to_delete=("ArgParse_Parent" "Arrays_SortBeforeBinarySearch" "faulthandler_disableBeforeClose" "faulthandler_tracetrackDumpBeforeClose" "faulthandler_unregisterBeforeClose" "File_MustClose" "NLTK_MissingMegamExplicitArg" "NLTK_MissingMegamFvalsArg" "NLTK_MustImplementEntries" "NLTK_NonterminalSymbolMutability" "RandomMustUseSeed" "Requests_PreparedRequestInit" "StringTemplate_ChangeAfterCreate" "Turtle_LastStatementDone" "UseProtp_in_FTP_TLS" "XMLParser_ParseMustFinalize")

          
            # delete all specs that appear in specs_to_delete. don't forget that spec file names end with .py as they're python files
            
            # for spec in "${all_specs[@]}"; do
            #   if [[ " ${specs_to_delete[@]} " =~ " ${spec%.*} " ]]; then
            #     rm ../mop-with-dynapt/specs-new/$spec
            #   fi
            # done

            # also delete these (causing issues)
            # rm ../mop-with-dynapt/specs-new/TfFunction_NoSideEffect.py
            # rm ../mop-with-dynapt/specs-new/Sets_Comparable.py
            # rm ../mop-with-dynapt/specs-new/Console_CloseReader.py
            # rm ../mop-with-dynapt/specs-new/UnsafeMapIterator.py
            # rm ../mop-with-dynapt/specs-new/UnsafeListIterator.py

            echo "=================== specs after removing unwanted ones ================="
            ls -al ../mop-with-dynapt/specs-new

        - name: Install Dependencies and Run MOP
          run: |
            echo "================== Running MOP =================="
            cd ./projects
            echo "Repository Name: $REPO_NAME"
            chmod +x ./run-mop-new.sh
            ./run-mop-new.sh ./$REPO_NAME "${{matrix.algorithm}}"
    
            # extract all .gz files
            cd ./reports/$REPO_NAME
            find . -type f -name "*.gz" -exec gunzip {} \;
            echo "Files within ./projects/reports/$REPO_NAME:"
            ls -l
        
        - name: Save link to logs
          run: |
            cd ./projects/reports/$REPO_NAME
            echo "https://github.com/${{github.repository}}/releases/download/${{ inputs.release-name }}/${{env.ZIP_FILE}}" > logs_link.txt
    
        - name: Save method_name.txt
          run: |
            ls -l ./projects/mop-with-dynapt/specs-new/
            cp ./projects/mop-with-dynapt/specs-new/method_name.txt ./projects/reports/$REPO_NAME/method_name.txt

        - name: Zip report files
          run: |
            cd ./projects/reports/$REPO_NAME
            zip -r ../../$ZIP_FILE .  # Create a zip file in the projects directory
            ls -l ../
          shell: bash
    
        - name: Upload report to GitHub Release
          uses: Wandalen/wretry.action@master
          with:
            attempt_delay: 60000 # 1 min
            attempt_limit: 10
            action: softprops/action-gh-release@v1
            with: |
              files: ./projects/${{env.ZIP_FILE}}
              tag_name: ${{ inputs.release-name }}
              name: ${{ inputs.release-name }}
              draft: false
              prerelease: true
              token: ${{ secrets.GITHUB_TOKEN }}

