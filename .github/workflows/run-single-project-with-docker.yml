name: Run Single Project with Docker

on:
  workflow_call:
    inputs:
      project-link:
        required: true
        type: string
      release-name:
        required: true
        type: string
    secrets: 
      GH_ACCESS_TOKEN:
        required: true 
jobs:
  run-original:
    runs-on: ubuntu-latest
    timeout-minutes: 185
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
    
        - name: Prepare Working Directory
          run: |
              mkdir ./projects
              cd ./projects
    
        - name: Setup variables
          run: |
              # Extract the repository URL from the input by removing any part after a semicolon
              REPO_URL=$(echo "${{ inputs.project-link }}" | sed 's/;.*//')
              # Extract the SHA from the input by removing any part before a semicolon
              SHA=$(echo "${{ inputs.project-link }}" | sed 's/.*;//')

              echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
              echo "SHA=$SHA" >> $GITHUB_ENV
          shell: bash
    
        - name: Pull Docker image
          run: docker pull ghcr.io/mohasarc/pymop-experimental-setup:latest
        
        - name: Run the project with Docker
          run: |
            docker run \
              -v ${{ github.workspace }}/projects:/experiment/__results__ \
              ghcr.io/mohasarc/pymop-experimental-setup:latest \
              ${{env.REPO_URL}} \
              ${{env.SHA}} \
              ORIGINAL \
              14400 \
              ${{ secrets.GH_ACCESS_TOKEN }}
          shell: bash

        - name: Print contents of ./projects
          run: |
            cd ./projects
            ls -la

        - name: Upload report to GitHub Release
          uses: Wandalen/wretry.action@master
          with:
            attempt_delay: 60000 # 1 min
            attempt_limit: 10
            action: softprops/action-gh-release@v1
            with: |
              files: ./projects/*.zip
              tag_name: ${{ inputs.release-name }}
              name: ${{ inputs.release-name }}
              draft: false
              prerelease: true
              token: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Fail the job on errors in ${{env.REPO_URL}}_ORIGINAL.out
          run: |
            # extract the tar.gz file into ./projects/extracted
            mkdir -p ./projects/extracted
            tar -xzf ./projects/*.tar.gz -C ./projects/extracted

            # run check_success.py
            cd ./projects/extracted
            cp ../../../scripts/check_success.py .
            python3 check_success.py

  run-algos:
    needs: run-original
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        algorithm: ['B', 'C', 'C+', 'D']
    timeout-minutes: 185
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
    
        - name: Prepare Working Directory
          run: |
              mkdir ./projects
              cd ./projects
    
        - name: Setup variables
          run: |
              REPO_URL=$(echo "${{ inputs.project-link }}" | sed 's/;.*//')
              SHA=$(echo "${{ inputs.project-link }}" | sed 's/.*;//')
              echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
              echo "SHA=$SHA" >> $GITHUB_ENV
          shell: bash
    
        - name: Create projects directory and copy scripts from ../scripts there
          run: |
            cd ./projects

        - name: Pull Docker image
          run: docker pull ghcr.io/mohasarc/pymop-experimental-setup:latest
          
        - name: Run the project with Docker
          run: |
            docker run \
                -v ${{ github.workspace }}/projects:/experiment/__results__ \
                ghcr.io/mohasarc/pymop-experimental-setup:latest \
                ${{env.REPO_URL}} \
                ${{env.SHA}} \
                ${{matrix.algorithm}} \
                14400 \
                ${{ secrets.GH_ACCESS_TOKEN }}
          shell: bash
        
        - name: Print contents of ./projects
          run: |
            cd ./projects
            ls -la

        - name: Upload report to GitHub Release
          uses: Wandalen/wretry.action@master
          with:
            attempt_delay: 60000 # 1 min
            attempt_limit: 10
            action: softprops/action-gh-release@v1
            with: |
              files: ./projects/*.tar.gz
              tag_name: ${{ inputs.release-name }}
              name: ${{ inputs.release-name }}
              draft: false
              prerelease: true
              token: ${{ secrets.GITHUB_TOKEN }}

