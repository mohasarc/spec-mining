name: Run Scripts on Multiple Repositories


permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      google_sheet_id:
        description: 'ID of the Google Sheet containing repository links and where results will be appended. Id is located in the URL of the Google Sheet https://docs.google.com/spreadsheets/d/<ID>/edit. The sheet should add "mass-run-mop@mohas-filemap-cloud.iam.gserviceaccount.com" as an editor'
        required: true
        default: '1mWRsxwLih48Zd5TdZCpM_Qv7VPIn0lzlD9lsXV6zDl0'
      links_worksheetTitle:
        description: 'Title of the tab containing the links. Default is "links". The first column should contain the links to the repositories. a maximum of 256 links can be added.'
        required: false
        default: 'links-1'

jobs:
  fetch_data:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Fetch Repository Links
        id: fetch-repos
        uses: jroehl/gsheet.action@v2.0.0
        with:
          spreadsheetId: ${{ github.event.inputs.google_sheet_id }}
          commands: |
            [
              {
                "command": "getData",
                "args": {
                  "worksheetTitle": "${{ github.event.inputs.links_worksheetTitle }}",
                  "range": "${{ github.event.inputs.links_worksheetTitle }}!A1:A"
                }
              }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}

      - name: Set up matrix for job
        id: set-matrix
        run: |
          # Base64 encode the results to avoid shell parsing issues
          ENCODED_RESULTS=$(echo '${{ steps.fetch-repos.outputs.results }}' | base64)
          # Decode and parse using jq
          JSON_STRING=$(echo "$ENCODED_RESULTS" | base64 --decode | jq -c '[.results[].result.rawData[][]]')
          echo "Extracted JSON String:"
          echo "$JSON_STRING"
          echo "::set-output name=matrix::$JSON_STRING"

  run_jobs:
    needs: fetch_data
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.fetch_data.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Prepare Working Directory
      run: |
          mkdir ./projects
          cd ./projects

    - name: Setup variables
      run: |
          REPO_URL="${{ matrix.repo }}"
          REPO_NAME="${REPO_URL##*/}"  # This strips everything before the last '/' character
          ZIP_FILE="${REPO_NAME}.zip"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
      shell: bash

    - name: clone SoftEngResearch/mop-with-dynapt
      run: |
        cd ./projects
        git clone https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/SoftEngResearch/mop-with-dynapt.git
        cd mop-with-dynapt
        git checkout add_statistics_new

    - name: Create projects directory and copy scripts from ../scripts there
      run: |
        cd ./projects
        cp ../scripts/* .
        ls -l

    - name: Install Dependencies and Run MOP
      run: |
        echo "================== Installing Dependencies =================="
        cd ./projects
        ls -l
        chmod +x ./install.sh
        ./install.sh ${{ matrix.repo }}

        echo "================== Running MOP =================="
        REPO_URL="${{ matrix.repo }}"
        REPO_NAME="${REPO_URL##*/}"  # This strips everything before the last '/' character
        echo "Repository Name: $REPO_NAME"
        chmod +x ./run-mop-new.sh
        ./run-mop-new.sh ./$REPO_NAME

        # extract all .gz files
        cd ./reports/$REPO_NAME
        find . -type f -name "*.gz" -exec gunzip {} \;
        echo "Files within ./projects/reports/$REPO_NAME:"
        ls -l

    - name: Zip report files
      run: |
        cd ./projects/reports/$REPO_NAME
        zip -r ../../$ZIP_FILE .  # Create a zip file in the projects directory
        ls -l ../
      shell: bash

    - name: Upload report to GitHub Release
      uses: Wandalen/wretry.action@master
      with:
        attempt_delay: 60000 # 1 min
        attempt_limit: 10
        action: softprops/action-gh-release@v1
        with: |
          files: ./projects/${{env.ZIP_FILE}}
          tag_name: mass-run-mop-${{inputs.links_worksheetTitle}}-${{ github.run_id }}
          name: mass-run-mop-${{inputs.links_worksheetTitle}}-${{ github.run_id }}
          draft: false
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

  analyze_data:
    needs: run_jobs
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: download files from release
        uses: robinraju/release-downloader@v1.10
        with:
          preRelease: true
          tag: mass-run-mop-${{inputs.links_worksheetTitle}}-${{ github.run_id }}
          fileName: '*.zip'
          out-file-path: './projects/reports/'
          extract: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: extract zip files into folders with the same name
        run: |
          cd ./projects/reports
          for f in *.zip; do unzip -d "${f%.*}" "$f"; done
          ls -l

      - name: Generate report csv
        run: |
          cd ./projects/reports

          # move ../../../scripts/parse-reports.py to ./projects/reports
          cp ../../scripts/parse-reports.py .
          
          ls -l
          # run the python script
          python3 parse-reports.py
          ls -l
  
          # print the contents of results.csv
          echo "================================== Results =================================="
          cat results.csv

        shell: bash
        continue-on-error: true

      - name: Upload report to GitHub Release
        uses: Wandalen/wretry.action@master
        with:
          attempt_delay: 60000 # 1 min
          attempt_limit: 10
          action: softprops/action-gh-release@v1
          with: |
            files: ./projects/reports/results.csv
            tag_name: mass-run-mop-${{inputs.links_worksheetTitle}}-${{ github.run_id }}
            name: mass-run-mop-${{inputs.links_worksheetTitle}}-${{ github.run_id }}
            draft: false
            prerelease: true
            token: ${{ secrets.GITHUB_TOKEN }}