name: Run Scripts on Multiple Repositories

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      google_sheet_id:
        description: 'ID of the Google Sheet containing repository links and where results will be appended. Id is located in the URL of the Google Sheet https://docs.google.com/spreadsheets/d/<ID>/edit. The sheet should add "mass-run-mop@mohas-filemap-cloud.iam.gserviceaccount.com" as an editor'
        required: true
        default: '1mWRsxwLih48Zd5TdZCpM_Qv7VPIn0lzlD9lsXV6zDl0'
      links_worksheetTitle:
        description: 'Title of the tab containing the links. Default is "links". The first column should contain the links to the repositories. a maximum of 256 links can be added.'
        required: false
        default: 'links-1'
      release_name:
        description: 'Name of the release to be created.'
        default: all-results-2024-05-18-morning
        required: true
  repository_dispatch:
    types: [run-multiple-repos]

jobs:
  fetch_data:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: pip3 install pygsheets PyGithub

      - name: Prepare matrix
        id: set-matrix
        run: python3 scripts/get_repo_links.py
        env:
            GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
            GOOGLE_SHEET_ID: ${{ github.event.inputs.google_sheet_id || github.event.client_payload.google_sheet_id }}
            LINKS_TAB_NAME: ${{github.event.inputs.links_worksheetTitle || github.event.client_payload.links_worksheetTitle}}

  run_jobs:
    needs: fetch_data
    uses: mohasarc/spec-mining/.github/workflows/run-single-project.yml@instrument_everything
    with:
      project-link: ${{ matrix.repo-link }}
      release-name: ${{ github.event.inputs.release_name || github.event.client_payload.release_name }}
    secrets:
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        repo-link: ${{ fromJson(needs.fetch_data.outputs.matrix) }}

  analyze_data:
    needs: run_jobs
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup working directories
        run: |
          mkdir -p ./projects/reports
        
      - name: Download files from multiple releases
        run: |
          for repo in ${{ github.repository }}; do
            echo "Downloading from $repo"
            # Parse the owner and repo name
            IFS='/' read -ra REPO_PARTS <<< "$repo"
            OWNER=${REPO_PARTS[0]}
            REPO=${REPO_PARTS[1]}
            # Use curl to fetch the latest release data
            RELEASE_DATA=$(curl --silent -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$OWNER/$REPO/releases/tags/${{ github.event.inputs.release_name || github.event.client_payload.release_name }}")
            # Check if the release data contains assets
            if echo "$RELEASE_DATA" | jq -e '.assets | length > 0' >/dev/null; then
              # Extract the URLs of all assets
              ASSET_URLS=$(echo $RELEASE_DATA | jq -r '.assets[].browser_download_url')
              # Loop over each asset URL and download
              for url in $ASSET_URLS; do
                ASSET_NAME=$(basename $url)
                # Decode URL-encoded characters
                DECODED_NAME=$(printf "%b" "${ASSET_NAME//%/\\x}")
                curl -L -o "./projects/reports/$DECODED_NAME" -H "Authorization: token $GITHUB_TOKEN" "$url"
              done
            else
              echo "No assets found or error in release data for $repo."
            fi
          done
          
          ls -al ./projects/reports
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: extract zip files into folders with the same name
        run: |
          cd ./projects/reports
          for f in *.zip; do
            folder_name=$(echo "${f%.*}" | sed -E 's/(_ORIGINAL|_A|_B|_C\+?|_D)$//')
            unzip -o -d "$folder_name" "$f"
            rm "$f"
          done
          ls -l

      - name: Generate report csv
        run: |
          cd ./projects/reports
      
          # move ../../../scripts/parse_reports.py and sanity_check.py to ./projects/reports
          cp ../../scripts/parse_reports.py .
          cp ../../scripts/sanity_check.py .

          # ls -l

          python3 parse_reports.py &> output_parse_reports.txt

          echo "================================== Results =================================="
          # cat results.csv

          python3 sanity_check.py &> output_sanity_check.txt
          echo "========================= Results after Sanity check ========================"
          #cat sanity-check-results.csv

        shell: bash
        continue-on-error: true

      - name: print logs
        run: |
          cd ./projects/reports
          echo "======================== parse_reports.py ====================="
          cat ./output_parse_reports.txt
          echo "======================== sanity_check.py ====================="
          cat ./output_sanity_check.txt

      - name: printout the results
        run: |
          cd ./projects/reports
          tail -n 7 output_sanity_check.txt

      - name: Upload report to GitHub Release
        uses: Wandalen/wretry.action@master
        with:
          attempt_delay: 60000 # 1 min
          attempt_limit: 10
          action: softprops/action-gh-release@v1
          with: |
            files: |
              ./projects/reports/results.csv
              ./projects/reports/sanity-check-results.csv
              ./projects/reports/output_parse_reports.txt
              ./projects/reports/output_sanity_check.txt
            tag_name: ${{github.event.inputs.release_name || github.event.client_payload.release_name}}
            name: ${{github.event.inputs.release_name || github.event.client_payload.release_name}}
            draft: false
            prerelease: true
            token: ${{ secrets.GITHUB_TOKEN }}
